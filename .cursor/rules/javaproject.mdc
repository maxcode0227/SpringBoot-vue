---
description: 
globs: .java,.xml,.yml,.properties,.sql
alwaysApply: false
---
你是 Java 编程、Spring Boot、Spring Framework、Mysql、Maven、JUnit、Redis 及相关 Java 技术的专家。

代码风格与结构

编写整洁、高效且文档完善的 Java 代码，提供准确的 Spring Boot 示例
始终遵循 Spring Boot 最佳实践和规范
实现 RESTful API 设计模式
使用符合驼峰命名法的描述性方法和变量名
遵循 Spring Boot 应用结构：控制器、服务、数据访问层、模型、配置类
Spring Boot 具体规范

使用 Spring Boot starters 快速配置项目依赖
正确使用注解（如 @SpringBootApplication、@RestController、@Service）
有效利用 Spring Boot 的自动配置特性
使用 @ControllerAdvice 和 @ExceptionHandler 实现统一异常处理
命名规范

类名使用大驼峰命名法（如：UserController、OrderService）
方法名和变量名使用小驼峰命名法（如：findUserById、isOrderValid）
常量使用大写下划线命名法（如：MAX_RETRY_ATTEMPTS、DEFAULT_PAGE_SIZE）
Java 和 Spring Boot 使用规范
前端传参尽量使用vo文件接收，明明如xxxVO
数据封装中间对象使用xxxDTO命名
service层命名按mvcc规范，如AccountService为接口，AccountServiceImpl为实现类(放于单独的impl目录下)
Dao的java文件以xxxDao结尾如OperationDao.java，同时在resources的mapper目录下生成对应的xml文件如OperationDaoMapper.xml

合理使用 Java 8 新特性
充分利用 Spring Boot 2.x 特性和最佳实践
使用 MybatisPlus 进行数据库操作, Dao的java文件以xxxDao结尾如OperationDao.java，同时在resources的mapper目录下生成对应的xml文件如OperationDaoMapper.xml
实现适当的数据验证（使用 Bean Validation，如 @Valid、自定义验证器）
配置管理

使用  application.yml 进行配置
使用 Spring Profiles 实现多环境配置
使用 @ConfigurationProperties 实现类型安全的配置属性
依赖注入和控制反转

优先使用构造器注入而非字段注入，提高可测试性
合理利用 Spring 的 IoC 容器管理 Bean 生命周期

测试规范
使用 JUnit 5 和 Spring Boot Test 编写单元测试
使用 MockMvc 测试 Web 层
使用 @SpringBootTest 实现集成测试
使用 @DataJpaTest 测试数据访问层
性能与扩展性

使用 @Async 实现非阻塞异步操作
实现合理的数据库索引和查询优化
安全规范

实现 Spring Security 进行身份认证和授权
使用恰当的密码加密方式（如：BCrypt）
根据需要配置 CORS
日志和监控

使用 SLF4J 配合 Logback 进行日志记录
合理使用日志级别（ERROR、WARN、INFO、DEBUG）
使用 Spring Boot Actuator 进行应用监控和指标收集
API 文档

使用 Springdoc OpenAPI（原 Swagger）生成 API 文档
数据访问与 ORM


正确实现实体关系和级联操作


使用 Maven 管理依赖和构建流程
实现多环境配置（开发、测试、生产）
遵循以下最佳实践：
RESTful API 设计（正确使用 HTTP 方法、状态码等）
微服务架构（如适用）

始终遵循 SOLID 原则，保持高内聚低耦合的 Spring Boot 应用设计。